(Disentangling the Web)#h3{text-align:center}

{text-align:left}
  Browsers are programs to display#b interactive text files. Like this one. 
By default, it would be a line of characters, without linebreaks, because they consider them a formatting decision that may only be due to how the text was edited: 
unformatted#["this",["#frame"],"tether fragment/ascend",["shift"],"fragment/textcontent","meta/demarkup","meta/quote",[["&:after","content"]],"inference/record",[["#unformatted"]],"inference/record","fragment/css",[["div","style","#text"]],"inference/record","fragment/document"]{font-family:courier;color:#757575;white-space:nowrap;max-width:100%;overflow:scroll;} 
  If it is in ("hypertext markup language")#b (an archaic document syntax of IBM's GML from 1969), it replaces <keywords>#b ("tags") between angle brackets in it with some alternative ways of doing so, such as <div>#span{font-weight:bold} for a new paragraph, <a>#b for this@https://html.spec.whatwg.org/multipage/indices.html ("anchor") link, <h1>#b for a title like above, or <svg>#b for a drawing like this: drawing#fragment/document({"svg":{"viewBox":"0 0 92.27 122.88","path":[{"fill-rule":"evenodd","clip-rule":"evenodd","fill":"#EC6F59","d":"M18.61,54.89C15.7,28.8,30.94,10.45,59.52,0C42.02,22.71,74.44,47.31,76.23,70.89 c4.19-7.15,6.57-16.69,7.04-29.45c21.43,33.62,3.66,88.57-43.5,80.67c-4.33-0.72-8.5-2.09-12.3-4.13C10.27,108.8,0,88.79,0,69.68 C0,57.5,5.21,46.63,11.95,37.99C12.85,46.45,14.77,52.76,18.61,54.89L18.61,54.89z"},{"fill-rule":"evenodd","clip-rule":"evenodd","fill":"#FAD15C","d":"M33.87,92.58c-4.86-12.55-4.19-32.82,9.42-39.93c0.1,23.3,23.05,26.27,18.8,51.14 c3.92-4.44,5.9-11.54,6.25-17.15c6.22,14.24,1.34,25.63-7.53,31.43c-26.97,17.64-50.19-18.12-34.75-37.72 C26.53,84.73,31.89,91.49,33.87,92.58L33.87,92.58z"}]}}){height:1em}. 

  Over a 100 of them are defined in HTML's namespace#b to reproduce common layout practices, but since the </keywords>#b need to be repeated to end their effect, it quickly proves to be a rather cumbersome format to write directly. Notice also that each keyword introduced features we did not yet consider. To split lines, we were really only interested in "div"#b, the others instead changed the design#b or functionality#b of a segment, while all providing some (semantic association)#b for mechanical interaction (eg. crawlers, screen readers). For a title image link on a new line, should we write "<div><a><h1><svg/></h1></a></div>"#b? 

  Semantics#h3{"id":"Semantics","style":{"margin-left":"1em","font-size":"1.1em"}}

  Not separating these different concerns of customization becomes a recipe for confusion very quickly as you start layering the implicit, arbitrary and limited combinations of them inherent in keywords. To avoid this, the <span>#b keyword exhausts html's otherwise confusing effects in serving its only necessary one of (isolating content)#b. To simply display content that isn't text, we'll also remember <svg>#b, <canvas>#b, <video>#b and <audio>#b. 

  HTML's second feature, allowing us to control these other aspects separately, are field="value"#b pairs ("attributes"), included with keywords between their angle brackets: (<a href="https://jsinterface.org">)#b specifies the address of a link, (<svg width="500">)#b the dimensions of an image. Every keyword has several of them, still arbitrarily controlling design, functionality or semantics. Luckily, all also share one dedicated to each respectively: 
  (1. style)#b for a (still problematic, but at least) (dedicated design language)@https://drafts.csswg.org/css2/, 
  (2.)#b a (slightly inconvenient) (long list)@https://www.htmlref.com/reference/appa/events1.htm{"class":"invert reference","style":{"& *":{"filter":"invert(0.8)"}}} of action and arbitrary metadata fields starting with on-#b (click, focus, mouseover &c.) and data-#b for a (general programming language)@https://tc39.es/ecma262/, 
  (3.)#b and id#b, class#b and role#b to assign unique, collective or (conventional)@https://www.digitala11y.com/wai-aria-1-1-cheat-sheet/{"class":"invert reference","style":{"& *":{"filter":"invert(0.8)"}}} semantics. 

  Design#h3{"id":"Design","style":{"margin-left":"1em","font-size":"1.1em"}}

  To begin explicitly designing our text, we need the design language of "style" called ("cascading stylesheets")#b (css), consisting of semicolon-separated series of "field:value;"#b pairs. Its field to control linebreaks is actually called display#b, which we saw implicitly set from the default inline#b to block#b by <div>. Color#b made the font blue#b, font-weight#b made it bold#b, font-size#b scaled it to 2em#b ((em quad)@https://en.wiktionary.org/wiki/em_quad). A title link is therefore simply: 
inference#script/highlight(` <span class="link" style="display:block;color:blue;font-weight:bold;font-size:2em;">Interface</span>`){max-width:100%;overflow:scroll}

  While easier to track, style rules can be long and redundant. This prompts the second most important html element, the <style>#b tag which instead of displaying text, reads CSS rules between {accolades} after selectors#b referencing elements by eg. #id#b or .class#b: 
inference#script/highlight(` <style>span.link{display:block;color:blue;font-weight:bold;font-size:2em;`}</style>){max-width:100%;overflow:scroll}

  This declutters a document well for us, but sets a distance between content and style, splitting our attention when editing one or the other. This is a problem of semantics, with #id and .class being arbitrary custom references that may be edited (maybe not for a "link", but for more complex elements). Finding more constant selectors can alleviate this concern from the style's side. We can apply the semantics of the "a" tag with the "link"#b role, and reference it with attribute style selector instead: 
inference#script/highlight(` <span role="link">Interface</span>
 <style>span[role=link]{display:block;color:blue;font-weight:bold;font-size:2em;}</style>`){max-width:100%;overflow:scroll}

  This leaves style rules meaningful enough even in isolation, that we can move them as far as to a separate file from the content: 
  
inference#script/highlight(` /* /style */
 span[role=link]{display:block;color:blue;font-weight:bold;font-size:2em;}`){max-width:90%;overflow:scroll;width:90%;margin:auto;border-radius:.5em; border:2px dashed #616161}
A third element in HTML exists to "link" such adjacent files to a document as modules#b, provided their (Multipurpose Internet Mail Extension)@https://mimetype.io/all-types{"class":"invert reference","style":{"& *":{"filter":"invert(0.8)"}}} (mime) file format in its particular semantic/data fields: 
inference#script/highlight(` <link rel="stylesheet" type="text/css" href="./style"/>`){max-width:100%;overflow:scroll}

  Interaction#h3{"id":"Interaction","style":{"margin-left":"1em","font-size":"1.1em"}}

  With design and semantics under control, we can address functionality. Similar to style, action#b fields expose a language to customize interactions, but with much more freedom. HTML and CSS were only an imperative#b interface to pre-defined expressions, with little declarative#b capacity (selectors, themes; neither worth exploring far because of the base expression complexity). What makes a language declarative is its ability to assign custom semantics ((names)#b) to parts of its memory ((variables)#b) for reference elsewhere. Procedures#b are an extension of this ability to syntax itself, to direct its order of execution ((stack)#b), and dereference variables they declared ((scope)#b) as they conclude. 
  Functions#b are declared procedures that can isolate variables ((arguments)#b) and conclude by yielding a variable. Javascript is a declarative, procedural and functional programming language with simple expressions#b that are mutually exclusive, and collectively exhaustive: 
{display:block;text-align:center;margin:.5em 10%;color:#616161}string#b, number#b, boolean#b, object#b, array#b, promise#b, generator#b, undefined#b, null#b, NaN#b, function#b, this#b, arguments#b
{text-align:left}  and operators#b: 
{display:block;text-align:center;margin:.5em 10%;color:#616161}= ((assignment)#b), ==, != ((equivalence)#b), ===, !== ((equality)#b), !, &&, ||, ?? ((logical)#b), +, -, *, /, %, <, >, <=, >=, ((arithmetic)#b), &, |, ^, ~, <<, >>, >>> ((bitwise)#b), import, export, let, if, else, do, while, for, in, of, try, catch, yield, return ((procedural)#b), (), {}, [], :, ?., ., ... (inference or ("destructuring")#b). 
{text-align:left}
  The browser itself in fact uses Javascript to process documents, reading every word, tag, attribute and style rule and translating them into pixels, semantics, design and (event listeners)#b. Action fields provide an entry point to take over this mechanism by defining procedures (actions) to be executed at given events. Browsers implicitly include their values in a function declaration to pass them two arguments: a model of the event and the containing element (as "this"#b). To operate a link, we need to set a click#b action and an address#b as a metadata field: 
inference#script/highlight(` <span role="link" data-address="https://jsinterface.org" onclick="this.ownerDocument.defaultView.open(this.dataset.address,'_blank');">Interface</span>`){max-width:100%;overflow:scroll}

  Spelling out this procedure every time can again be redundant, so we can reach for the last important element, <script>#b, where we can write proper javascript modules to reference elements and declare functions in isolation. Out of an action field's context, functions are also declared in {accolades}, but following their name and argument list in parentheses: 
function#script/highlight(
` function action(event){this.ownerDocument.defaultView.open(this.dataset.address,'_blank');}`){max-width:100%;overflow:scroll}
  In our case, the arguments will only include the event#b - the "this" argument is a special, default one to distinguish two possible types of arguments in computer functions (scope#b and context#b). 
Its existence has a long history of misunderstanding, leading to a common, redundant classification of seemingly distinct function types: 
{text-align:left;margin-left:1em}
(1. free function)#b when it is undefined: 
free#script/highlight("action(...arguments)"){display:inline}
(2. closure)#b when it is permanently assigned (bound) to a variable: 
closure#script/highlight("action.bind(scope)"){display:inline}
(3. method)#b when it is implicitly bound to a variable by being a member on it (particular to object-oriented programming): 
method#script/highlight("scope.action(...arguments)"){display:inline}
(4. functor)#b when it is dynamically passed along with free arguments: 
functor#script/highlight("action.call(...arguments)"){display:inline}.
{text-align:left}

  Before getting confused by this diversity, notice that the first three are all simply assuming a value for the "this" (scope) argument, while the fourth doesn't. This is collectively called "partial application" of a functor#b, which in turn is only the mathematically accurate term (category) for functions representing computer procedures. What truly differentiates functions is rather their return value: operators#b return constants, combinators#b return other functors. Javascript's "bind"#b method simply acts as a function returning its scope function with a default argument, whatever that may be (object, variable or undefined). Unfortunately the Javascript base expressions listed above are littered with unnecessary "method" bindings, but I present alternative combinators to dissolve this confusion in my notes on Inference@Blik_2023_inference. For now, all we need to understand is that our action functions will need to be bound to an element reference and an event type for the browser to find them. While the obvious "node.event=action" works indeed, browsers offer an "addEventListener" (and corresponding "removeEventListener") method to adjust some conditions with an optional third argument. Functions being only a declaration of a procedure, we need a second procedure to do this explicitly, for which the module scope ("this") has the window#b object available containing the model of the entire document: 
inference#script/highlight(
'<script>
 function action(event){this.ownerDocument.defaultView.open(this.dataset.address,"_blank");}
 this.document.querySelectorAll("span[role=link]").forEach(node=>
 node.addEventListener("click",action
,{capture:false,once:false,passive:false,signal:new AbortController().signal}));
</script>'){max-width:100%;overflow:scroll}

  Similar to how the "."#b notation for "methods" earlier implied an assignment of the function's scope, the arrow doodle "=>"#b here is an abbreviation javascript supports for free functors, where the "this" argument is inherited from the calling procedure's scope, as it would be ignored anyway. While you can preserve the accolades to include multiple statements, restricting its usage for single expressions corresponds to a type of free functors called "lambdas"#b that promote discipline to avoid liabilities of imperative programming. When you have more actions to assign, it is practical to group them in one object so you can derive them all with the same lambda expression. This generalization reveals how the action namespace is actually independent from this procedure, which is where Javascript's own, natural ability to isolate (referentially transparent)#b modules most obviously outshines HTML and CSS. Adhering to modular "composition over convention" principles outlined in Interface#fragment/link("https://jsinterface.org/Blik_2023_interface/","Interface"), we'll also limit imperative procedures to a single expression on the module scope. 

  At once, we can note that while selector specificity helped prevent mismatched content references in the isolation of CSS's declarative rules, this procedural assignment of interactions may still leave past or future elements out of its scope at the moment of execution. Luckily, browser actions don't need to be bound to a specific element to receive events from it. When an interaction happens, the event stores its own reference to the "target" element it originated in, and gets "propagated" to each containing element in the document. You can still restrict actions to more specific container elements, but to make sure you receive them, every event can be captured on the document level. To buffer events happening before your bindings are ready, assign asynchronous actions that delegate them afterwards: 

capture#script(
' // /capture
 capture.call(this,"/actions");

 export function capture(module)
{let lead=["/","./"].find(lead=>module.startsWith(lead));
 let route=actions.replace(lead,"").split("/").filter(Boolean);
 let actions=import(lead+route.shift()).then(module=>
 Object.assign(["default"],route).reduce((module,field)=>module[field],module));
 let buffered=Object.keys(this).filter(([field])=>field.startsWith("on"));
 buffered.forEach(event=>this.addEventListener(event.slice(2),buffer.bind(actions)));
 actions.then(actions=>
 new Set(Object.values(actions).flatMap(Object.keys)).forEach(event=>
 this.addEventListener(event,delegate.bind(actions)))).then(ready=>
 buffered.forEach(event=>this.removeEventListener(event.slice(2),buffer)));
};

 export function delegate(island,event)
{Object.entries(this).map(([selector,actions])=>
[event.target.closest(selector),actions[event.type]
]).forEach(([scope,action])=>action?.call(scope,event));
};

 export function buffer(island,event)
{this.then(actions=>delegate.call(actions,...arguments));
 event.preventDefault();
 console.warn({["captured "+event.type+" from"]:event.target});
};',{"source":"/capture"}){max-width:90%;overflow:scroll;width:90%;margin:auto;border-radius:.5em; border:2px dashed #616161}

actions#script(
` // /actions
 export default
 {"span[role=link]":
 {click(event)
{this.ownerDocument.defaultView.open(this.dataset.address,"_blank");
}}
 ,"canvas[role=img]":
 {contextrestored(event)
{let [src,alt]=["data-source","aria-label"].map(this.getAttribute.bind(this));
 compose(image,canvas,infer(insert,"over",this))(src,alt);
}}
 };`,{"source":"/actions"}){max-width:90%;overflow:scroll;width:90%;margin:auto;border-radius:.5em; border:2px dashed #616161}

  As with style#b tags, we can now also isolate this module into a file. Since javascript can interfere with the browser as part of the its own procedure, a simple link tag is not designed to control it sufficiently. The script tag itself was extended with attributes to make it execute in parallel with the rest of the document ("async"), or after it is fully displayed ("defer"). For backwards compatibility with some old, deprecated javascript syntax ("commonjs"), a "type" field needs to be set explicitly: 
inference#script/highlight(` <script src="./capture" type="module" async="false" defer="true"/>`){max-width:100%;overflow:scroll} 

  (The goal)#b{font-size:1.1em}

  We shouldn't forget to note that these last three tags (script, style and link) are new in the sense that they don't isolate content#b of their own that we'd like to display. They are called metadata#b tags, and they modify the display of other elements in the document, so ideally they are processed before them. While being careful to place them first could be sufficient, or it may even be fine to change the document retrospectively with styles and scripts, some metadata tags contain semantic information about the entire document that may be critical for its display, or be interesting without its content, such as <meta>#b tags for description, encoding and optimal screen dimensions. For this reason, the main <html>#b tag is divided by respective <head>#b and <body>#b tags, following a standard GML namespace declaration: 

inference#script/highlight(`<!DOCTYPE html>
<html lang="en">
<head>
<title>Interface</title>
<meta name="description" content="client interface">
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="icon" type="image/svg+xml" href="svg/node/document">
<link rel="stylesheet" type="text/css" href="./style">
<script src="./capture" type="module" async="false" defer="true"/>
</head>
<body><span role="link">Title</span></body>
</html>`){max-width:90%;overflow:scroll;width:90%;margin:auto;border-radius:.5em; border:2px dashed #616161}

  (Dark ages)#h3{"id":"Dark ages","style":{"margin-left":"1em","font-size":"1.1em"}}

  This triplet#b of an HTML document with style and action modules is as convenient as it gets if you only have a static file editor and server. We're still dealing with three languages tough, one more limited than the other, so (static site generation)#b (SSG) with a coherent fourth structure (shell, perl, C, python scripts) has always been preferred. Two yers into only HTML's existence, when dynamic content could only be generated by a server, static file servers ((httpd)#b, Apache#b, (Microsoft IIS)#b) adopted ("common gateway interface")#b (CGI) modules in 1993#b to execute such scripts for clients. While the flourishing complexity of HTML had to be preserved for backwards compatibility, Javascript#b and CSS#b were introduced in 1995 and 1996 to separate its concerns as we did above, which distributed dynamic capabilities to the client side. Document design was nonetheless still highly complicated, so common scripting practices matured into graphical interfaces like (Adobe Dreaweaver)#b (C++, 1997) and (Movable Type)#b (Perl, 2001), as the first commercially viable solutions. To keep scopes and procedures of CGI scripts available for dynamic#b (server-side rendering)#b, dedicated servers arrived with Apache's (mod_php)#b (C, 1997), Tomcat#b (Java, 1999), Webrick#b (Ruby, 2000), Microsoft's ASP#b (C#, 2001), and WSGI#b (Python, 2003), each with a respective framework to control it: (PHP)#b, (Java Server Pages)#b, (Ruby on Rails)#b, ASP.NET#b and Django#b. Behind all the these brand names, the big idea they were all capitalizing on was to merge CSS and/or JS into HTML with a fourth, heterogenous "template"#b format (something beautiful like inference#script/highlight(`<%for item in $list%><span><%=$item%></span><%end%>`){display:inline;white-space:normal;word-break:break-all}), or at least introduce some non-standard html syntax of "directives"#b (eg. "server-side includes": ssi#fragment/document({"span":{"#text":"<!--#include virtual=\"./text\"-->"}}){font-family:monospace;color:#616161;word-break:break-all}). Good as this idea seems for many to this day, it only lead to a new market of graphical interfaces called ("content management systems")#b ((Wordpress)#b 2003, OpenCms#b 2000, Shopify#b 2006, Sitecore#b 2001 and (django CMS)#b 2007) forming a lobby to benefit their maintainers more than its customers, but no real technological advances to talk about. 

  In the meantime, despite constant professional criticism for its volatility due to lack of traditional type annotation (which ruby and python also lack, just have less exposure as server-side languages), Javascript slowly evolved as the exclusive, ubiquitous programming language on web clients, where it proved unprecedentedly accessable#b and intuitive#b. A new generation of amateur programmers emerged, and with them a path of least resistence towards abandoning complex server architectures in favor of (complex) (client-side rendering)#b, filling the web with static ("single page applications")#b devoid of content before their javascript executes redundantly. By 2006 JQuery#b emerged as the first de facto (client-side framework)#b to challenge the dominance of PHP and Ruby, and this was only the inflexion point of javascript's acceleration. To fight this dangerous trend, (static site generation)#b saw a rennaissance after 15 years in Jekyll#b (2008), a spinoff of Rails leveraging the new markdown@https://daringfireball.net/2004/03/introducing_markdown format for simplified (and limited) templating. 

  The dominance of javascript was decided in 2009#b with the arrival of Node.js#b. Taking javascript's (V8 compiler)#b from the Chrome browser and augmenting it with operating system capabilities (file and network access) made javascript a language singularly capable of operating universally#b on both server and client side. Its unique asynchronous runtime procedure ("event loop") inherited from its optimization to listen for browser events made it equally more suitable for server operation than previous CGI and multi-threaded servers. With the new generation of professionals still enthralled by the ill-conceived prospects of client-side rendering though, this JS singularity came to be astonishingly wasted on atavistic static site generators. 

  Backbone#b, Knockout#b and AngularJS#b were all released the same year to inaugurate the upcoming decade of race for most overengineered UI architecture ever, with as little progress made during as possible. Their redundant browser APIs ( backbone#script/highlight(`Backbone.Model.extend({}).on("change:field",event)`){display:inline;white-space:normal;word-break:break-all} ), witty ( knockout#script/highlight(`<span data-bind="template:{name:'item',data:item}">`){display:inline;white-space:normal;word-break:break-all} ) or less witty ( angular#script/highlight(`<span ng-repeat="item in items">{{item}}</span>`){display:inline;white-space:normal;word-break:break-all} ) html templates and MVC/MVVM alchemy inspired Ember#b to combine the worst of all worlds into an object-oriented hellscape in 2011. To represent the quiet subcurrent of reason, Meteor#b extracted the single substantial idea of applying the (observer pattern)#b from Knockout, and extended it for "local-first" synchronization with server sockets, still bundled alas with the bloat of a monolithic framework. 2012 was the year critics of JS at Microsoft launched their offensive with the release of the Typescript#b compiler, adding type annotation to the syntax without exposing a modular parser and compiler, creating a critical bottleneck between the industry and the language standards (which luckily resisted the lobby to integrate it). To deal with the proliferation of non-standard dialects of javacript, general compilers such as Gulp, Eslint#b and Webpack#b (followed by Babel#b next year) became commonplace in 2013. The all-time champions of overengineering lined up in the following years: React#b, Vue#b in 2014 and Angular#b in 2015 took over the industry as the new standards of web development with their "component"#b architectures - a full detachment from the native document model using the ill-conceived object-oriented notion of nested composition. To React's credit, it started promoting the return to web standards, and was reasonably modular to be used as a simple javascript library on both server and client side, but the profession was too gaslit by the complexity lobby not depend on the Next.js#b framework promptly built around it in 2016. 
 
  To somewhat justify this technological dead end and ensuing russel#fragment/link("https://infrequently.org/2023/02/the-market-for-lemons/","market failure"), even the consortium of web standards (W3C) was complicit in promoting w3c#fragment/link("https://www.w3.org/TR/components-intro/","Web Components"), isolating styles and scripts internally in a "shadow dom" extension of the document model in 2014. Its ambitious showcase in Google's Polymer#b saw diminishing returns ever since as the concept isn't addressing any of the real problems with (concern separation)#b and (referential transparency)#b. To pave a way to redemption, the European Computer Manufacturers Association's Technical Committee 39 (ECMA TC39), responsible for the standard (Javascript language specification)@https://262.ecma-international.org/6.0/index.html (ECMA-262), introduced its module syntax in 2015. React took the opportunity to implement (server-side rendering)#b for its components, but it has barely been utilized outside of Next and Meteor's adoption internally, and "server components" took until 2020 to arrive. 2017 Svelte#b, 2018 11ty#b, Hyperapp, 2019 Blitz, Quasar, 2020 React Server Components, Solid.js, Inertia.js 2021 SvelteKit, Astro#b, Remix, Qwik, Hono, Htmx, 2022 RedwoodJS, Wasp, 2023 Jito. 

  (Enlightenment 2025)#h3{"id":"Enlightenment","style":{"margin-left":"1em","font-size":"1.1em"}}










                







